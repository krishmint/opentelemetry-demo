# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

receivers:
  otlp:  ## oltp collector is installed in docker compose and port is exposed in compose file to recive data  
    protocols:
      grpc:  ## otlp receiver is configured to receive data over gRPC & http at the endpoint mentioned 
        endpoint: ${env:OTEL_COLLECTOR_HOST}:${env:OTEL_COLLECTOR_PORT_GRPC}
      http:
        endpoint: ${env:OTEL_COLLECTOR_HOST}:${env:OTEL_COLLECTOR_PORT_HTTP}
        cors:
          allowed_origins:
            - "http://*"
            - "https://*"
            
  httpcheck/frontendproxy:  ## frondend proxy used to 
    targets:  ## httpcheck reciver used to check the health of the frontendproxy service by periodically sending requests to it and verifying its responses.
      - endpoint: http://frontendproxy:${env:ENVOY_PORT}
      
  docker_stats:  ## The docker_stats receiver collects Docker container statistics by connecting to the Docker socket at unix:///var/run/docker.sock 
  ##unix socket- The Docker daemon exposes a Unix socket (/var/run/docker.sock) that allows communication with the Docker API providing a way to interact with Docker without needing to expose an HTTP endpoint.
    endpoint: unix:///var/run/docker.sock
    
  redis:  ## used in cart service in docker compose file
    endpoint: "valkey-cart:6379"
    username: "valkey"
    collection_interval: 10s
    
  # Host metrics
  hostmetrics:
    root_path: /hostfs
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
      load:
      filesystem:
        exclude_mount_points:
          mount_points:
            - /dev/*
            - /proc/*
            - /sys/*
            - /run/k3s/containerd/*
            - /var/lib/docker/*
            - /var/lib/kubelet/*
            - /snap/*
          match_type: regexp
        exclude_fs_types:
          fs_types:
            - autofs
            - binfmt_misc
            - bpf
            - cgroup2
            - configfs
            - debugfs
            - devpts
            - devtmpfs
            - fusectl
            - hugetlbfs
            - iso9660
            - mqueue
            - nsfs
            - overlay
            - proc
            - procfs
            - pstore
            - rpc_pipefs
            - securityfs
            - selinuxfs
            - squashfs
            - sysfs
            - tracefs
          match_type: strict
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
      paging:
      processes:
      process:
        mute_process_exe_error: true
        mute_process_io_error: true
        mute_process_user_error: true
        
  # Collector metrics ####
  prometheus:
    config:
      scrape_configs:    ###Scrapes metrics from the OpenTelemetry collector itself at 0.0.0.0:8888 every 10 seconds.
        - job_name: 'otelcol'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

exporters:  ## Exporters send & store the processed data to various backends as jaeger, opensearch promotheus.
  debug:
  
  otlp:     ## Sends data to a Jaeger(traces) instance at jaeger:4317  with insecure TLS settings.
    endpoint: "jaeger:4317"   
    tls:
      insecure: true
      
  otlphttp/prometheus: ## otlp-http send metrics data to prometheus 
    endpoint: "http://prometheus:9090/api/v1/otlp"
    tls:
      insecure: true
      
  opensearch:   ##act as exporter for logs data 
    logs_index: otel   ## This parameter defines the name of the index in OpenSearch where the logs will be stored. 
    http:
      endpoint: "http://opensearch:9200"
      tls:
        insecure: true

processors:
  batch:     ##( batch processing mainly for logs and metrics)
  transform:  ## mainly for traces data
    error_mode: ignore
    trace_statements:
      - context: span
        statements:
          # could be removed when https://github.com/vercel/next.js/pull/64852 is fixed upstream
          - replace_pattern(name, "\\?.*", "")
          - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")

connectors:
  spanmetrics:   ## collects metrics from span-traces, it acts as both reciver and exporter
## exporter for traces data-  when otlp-col send traces data to span metrics
## reciver for metrics data - when it scraps metrics from traces send by otlp-col

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [transform, batch]
      exporters: [otlp, debug, spanmetrics]   ###  here Otlp exporter means jeager 
    metrics:
      receivers: [hostmetrics, docker_stats, httpcheck/frontendproxy, otlp, prometheus, redis, spanmetrics]
      processors: [batch]
      exporters: [otlphttp/prometheus, debug]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [opensearch, debug]
